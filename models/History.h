/**
 *
 *  History.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3
{

class History
{
  public:
    struct Cols
    {
        static const std::string _USERID;
        static const std::string _ID;
        static const std::string _DRIVER;
        static const std::string _TITLE;
        static const std::string _THUMBNAIL;
        static const std::string _LATEST;
        static const std::string _NEW;
        static const std::string _DATETIME;
        static const std::string _UPDATEDATETIME;
        static const std::string _CHAPTERID;
        static const std::string _CHAPTERTITLE;
        static const std::string _PAGE;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::vector<std::string> primaryKeyName;
    using PrimaryKeyType = std::tuple<uint64_t,std::string,std::string>;//USERID,ID,DRIVER
    PrimaryKeyType getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit History(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit History(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    History(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    History() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column USERID  */
    ///Get the value of the column USERID, returns the default value if the column is null
    const uint64_t &getValueOfUserid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getUserid() const noexcept;
    ///Set the value of the column USERID
    void setUserid(const uint64_t &pUserid) noexcept;

    /**  For column ID  */
    ///Get the value of the column ID, returns the default value if the column is null
    const std::string &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getId() const noexcept;
    ///Set the value of the column ID
    void setId(const std::string &pId) noexcept;
    void setId(std::string &&pId) noexcept;

    /**  For column DRIVER  */
    ///Get the value of the column DRIVER, returns the default value if the column is null
    const std::string &getValueOfDriver() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDriver() const noexcept;
    ///Set the value of the column DRIVER
    void setDriver(const std::string &pDriver) noexcept;
    void setDriver(std::string &&pDriver) noexcept;

    /**  For column TITLE  */
    ///Get the value of the column TITLE, returns the default value if the column is null
    const std::string &getValueOfTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTitle() const noexcept;
    ///Set the value of the column TITLE
    void setTitle(const std::string &pTitle) noexcept;
    void setTitle(std::string &&pTitle) noexcept;

    /**  For column THUMBNAIL  */
    ///Get the value of the column THUMBNAIL, returns the default value if the column is null
    const std::string &getValueOfThumbnail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getThumbnail() const noexcept;
    ///Set the value of the column THUMBNAIL
    void setThumbnail(const std::string &pThumbnail) noexcept;
    void setThumbnail(std::string &&pThumbnail) noexcept;

    /**  For column LATEST  */
    ///Get the value of the column LATEST, returns the default value if the column is null
    const std::string &getValueOfLatest() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLatest() const noexcept;
    ///Set the value of the column LATEST
    void setLatest(const std::string &pLatest) noexcept;
    void setLatest(std::string &&pLatest) noexcept;

    /**  For column NEW  */
    ///Get the value of the column NEW, returns the default value if the column is null
    const std::string &getValueOfNew() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNew() const noexcept;
    ///Set the value of the column NEW
    void setNew(const std::string &pNew) noexcept;
    void setNew(std::string &&pNew) noexcept;

    /**  For column DATETIME  */
    ///Get the value of the column DATETIME, returns the default value if the column is null
    const uint64_t &getValueOfDatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getDatetime() const noexcept;
    ///Set the value of the column DATETIME
    void setDatetime(const uint64_t &pDatetime) noexcept;

    /**  For column UPDATEDATETIME  */
    ///Get the value of the column UPDATEDATETIME, returns the default value if the column is null
    const uint64_t &getValueOfUpdatedatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getUpdatedatetime() const noexcept;
    ///Set the value of the column UPDATEDATETIME
    void setUpdatedatetime(const uint64_t &pUpdatedatetime) noexcept;

    /**  For column CHAPTERID  */
    ///Get the value of the column CHAPTERID, returns the default value if the column is null
    const std::string &getValueOfChapterid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getChapterid() const noexcept;
    ///Set the value of the column CHAPTERID
    void setChapterid(const std::string &pChapterid) noexcept;
    void setChapterid(std::string &&pChapterid) noexcept;
    void setChapteridToNull() noexcept;

    /**  For column CHAPTERTITLE  */
    ///Get the value of the column CHAPTERTITLE, returns the default value if the column is null
    const std::string &getValueOfChaptertitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getChaptertitle() const noexcept;
    ///Set the value of the column CHAPTERTITLE
    void setChaptertitle(const std::string &pChaptertitle) noexcept;
    void setChaptertitle(std::string &&pChaptertitle) noexcept;
    void setChaptertitleToNull() noexcept;

    /**  For column PAGE  */
    ///Get the value of the column PAGE, returns the default value if the column is null
    const uint64_t &getValueOfPage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getPage() const noexcept;
    ///Set the value of the column PAGE
    void setPage(const uint64_t &pPage) noexcept;
    void setPageToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<History>;
    friend drogon::orm::BaseBuilder<History, true, true>;
    friend drogon::orm::BaseBuilder<History, true, false>;
    friend drogon::orm::BaseBuilder<History, false, true>;
    friend drogon::orm::BaseBuilder<History, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<History>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> userid_;
    std::shared_ptr<std::string> id_;
    std::shared_ptr<std::string> driver_;
    std::shared_ptr<std::string> title_;
    std::shared_ptr<std::string> thumbnail_;
    std::shared_ptr<std::string> latest_;
    std::shared_ptr<std::string> new_;
    std::shared_ptr<uint64_t> datetime_;
    std::shared_ptr<uint64_t> updatedatetime_;
    std::shared_ptr<std::string> chapterid_;
    std::shared_ptr<std::string> chaptertitle_;
    std::shared_ptr<uint64_t> page_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where USERID = ? and ID = ? and DRIVER = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where USERID = ? and ID = ? and DRIVER = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "USERID,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "ID,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "DRIVER,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "TITLE,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "THUMBNAIL,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "LATEST,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "NEW,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "DATETIME,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "UPDATEDATETIME,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "CHAPTERID,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "CHAPTERTITLE,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "PAGE,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[0])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace sqlite3
} // namespace drogon_model
