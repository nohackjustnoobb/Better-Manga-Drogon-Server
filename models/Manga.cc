/**
 *
 *  Manga.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Manga.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Manga::Cols::_USERID = "USERID";
const std::string Manga::Cols::_ID = "ID";
const std::string Manga::Cols::_DRIVER = "DRIVER";
const std::vector<std::string> Manga::primaryKeyName = {"USERID","ID","DRIVER"};
const bool Manga::hasPrimaryKey = true;
const std::string Manga::tableName = "manga";

const std::vector<typename Manga::MetaData> Manga::metaData_={
{"USERID","uint64_t","integer",8,0,1,1},
{"ID","std::string","varchar(255)",0,0,1,1},
{"DRIVER","std::string","varchar(255)",0,0,1,1}
};
const std::string &Manga::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Manga::Manga(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["USERID"].isNull())
        {
            userid_=std::make_shared<uint64_t>(r["USERID"].as<uint64_t>());
        }
        if(!r["ID"].isNull())
        {
            id_=std::make_shared<std::string>(r["ID"].as<std::string>());
        }
        if(!r["DRIVER"].isNull())
        {
            driver_=std::make_shared<std::string>(r["DRIVER"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            driver_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Manga::Manga(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            driver_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

Manga::Manga(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("USERID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["USERID"].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson["USERID"].asUInt64());
        }
    }
    if(pJson.isMember("ID"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["ID"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["ID"].asString());
        }
    }
    if(pJson.isMember("DRIVER"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["DRIVER"].isNull())
        {
            driver_=std::make_shared<std::string>(pJson["DRIVER"].asString());
        }
    }
}

void Manga::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            driver_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void Manga::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("USERID"))
    {
        if(!pJson["USERID"].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson["USERID"].asUInt64());
        }
    }
    if(pJson.isMember("ID"))
    {
        if(!pJson["ID"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["ID"].asString());
        }
    }
    if(pJson.isMember("DRIVER"))
    {
        if(!pJson["DRIVER"].isNull())
        {
            driver_=std::make_shared<std::string>(pJson["DRIVER"].asString());
        }
    }
}

const uint64_t &Manga::getValueOfUserid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Manga::getUserid() const noexcept
{
    return userid_;
}
void Manga::setUserid(const uint64_t &pUserid) noexcept
{
    userid_ = std::make_shared<uint64_t>(pUserid);
    dirtyFlag_[0] = true;
}

const std::string &Manga::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Manga::getId() const noexcept
{
    return id_;
}
void Manga::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[1] = true;
}
void Manga::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[1] = true;
}

const std::string &Manga::getValueOfDriver() const noexcept
{
    const static std::string defaultValue = std::string();
    if(driver_)
        return *driver_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Manga::getDriver() const noexcept
{
    return driver_;
}
void Manga::setDriver(const std::string &pDriver) noexcept
{
    driver_ = std::make_shared<std::string>(pDriver);
    dirtyFlag_[2] = true;
}
void Manga::setDriver(std::string &&pDriver) noexcept
{
    driver_ = std::make_shared<std::string>(std::move(pDriver));
    dirtyFlag_[2] = true;
}

void Manga::updateId(const uint64_t id)
{
}
typename Manga::PrimaryKeyType Manga::getPrimaryKey() const
{
    return std::make_tuple(*userid_,*id_,*driver_);
}

const std::vector<std::string> &Manga::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "USERID",
        "ID",
        "DRIVER"
    };
    return inCols;
}

void Manga::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDriver())
        {
            binder << getValueOfDriver();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Manga::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Manga::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDriver())
        {
            binder << getValueOfDriver();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Manga::toJson() const
{
    Json::Value ret;
    if(getUserid())
    {
        ret["USERID"]=(Json::UInt64)getValueOfUserid();
    }
    else
    {
        ret["USERID"]=Json::Value();
    }
    if(getId())
    {
        ret["ID"]=getValueOfId();
    }
    else
    {
        ret["ID"]=Json::Value();
    }
    if(getDriver())
    {
        ret["DRIVER"]=getValueOfDriver();
    }
    else
    {
        ret["DRIVER"]=Json::Value();
    }
    return ret;
}

Json::Value Manga::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[1]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDriver())
            {
                ret[pMasqueradingVector[2]]=getValueOfDriver();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserid())
    {
        ret["USERID"]=(Json::UInt64)getValueOfUserid();
    }
    else
    {
        ret["USERID"]=Json::Value();
    }
    if(getId())
    {
        ret["ID"]=getValueOfId();
    }
    else
    {
        ret["ID"]=Json::Value();
    }
    if(getDriver())
    {
        ret["DRIVER"]=getValueOfDriver();
    }
    else
    {
        ret["DRIVER"]=Json::Value();
    }
    return ret;
}

bool Manga::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("USERID"))
    {
        if(!validJsonOfField(0, "USERID", pJson["USERID"], err, true))
            return false;
    }
    else
    {
        err="The USERID column cannot be null";
        return false;
    }
    if(pJson.isMember("ID"))
    {
        if(!validJsonOfField(1, "ID", pJson["ID"], err, true))
            return false;
    }
    else
    {
        err="The ID column cannot be null";
        return false;
    }
    if(pJson.isMember("DRIVER"))
    {
        if(!validJsonOfField(2, "DRIVER", pJson["DRIVER"], err, true))
            return false;
    }
    else
    {
        err="The DRIVER column cannot be null";
        return false;
    }
    return true;
}
bool Manga::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Manga::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("USERID"))
    {
        if(!validJsonOfField(0, "USERID", pJson["USERID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("ID"))
    {
        if(!validJsonOfField(1, "ID", pJson["ID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("DRIVER"))
    {
        if(!validJsonOfField(2, "DRIVER", pJson["DRIVER"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool Manga::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Manga::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
