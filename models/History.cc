/**
 *
 *  History.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "History.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string History::Cols::_USERID = "USERID";
const std::string History::Cols::_ID = "ID";
const std::string History::Cols::_DRIVER = "DRIVER";
const std::string History::Cols::_TITLE = "TITLE";
const std::string History::Cols::_THUMBNAIL = "THUMBNAIL";
const std::string History::Cols::_LATEST = "LATEST";
const std::string History::Cols::_NEW = "NEW";
const std::string History::Cols::_DATETIME = "DATETIME";
const std::string History::Cols::_UPDATEDATETIME = "UPDATEDATETIME";
const std::string History::Cols::_CHAPTERID = "CHAPTERID";
const std::string History::Cols::_CHAPTERTITLE = "CHAPTERTITLE";
const std::string History::Cols::_PAGE = "PAGE";
const std::vector<std::string> History::primaryKeyName = {"USERID","ID","DRIVER"};
const bool History::hasPrimaryKey = true;
const std::string History::tableName = "history";

const std::vector<typename History::MetaData> History::metaData_={
{"USERID","uint64_t","integer",8,0,1,1},
{"ID","std::string","varchar(255)",0,0,1,1},
{"DRIVER","std::string","varchar(255)",0,0,1,1},
{"TITLE","std::string","varchar(255)",0,0,0,1},
{"THUMBNAIL","std::string","varchar(255)",0,0,0,1},
{"LATEST","std::string","varchar(255)",0,0,0,1},
{"NEW","std::string","boolean",0,0,0,1},
{"DATETIME","uint64_t","int",8,0,0,1},
{"UPDATEDATETIME","uint64_t","int",8,0,0,1},
{"CHAPTERID","std::string","varchar(255)",0,0,0,0},
{"CHAPTERTITLE","std::string","varchar(255)",0,0,0,0},
{"PAGE","uint64_t","int",8,0,0,0}
};
const std::string &History::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
History::History(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["USERID"].isNull())
        {
            userid_=std::make_shared<uint64_t>(r["USERID"].as<uint64_t>());
        }
        if(!r["ID"].isNull())
        {
            id_=std::make_shared<std::string>(r["ID"].as<std::string>());
        }
        if(!r["DRIVER"].isNull())
        {
            driver_=std::make_shared<std::string>(r["DRIVER"].as<std::string>());
        }
        if(!r["TITLE"].isNull())
        {
            title_=std::make_shared<std::string>(r["TITLE"].as<std::string>());
        }
        if(!r["THUMBNAIL"].isNull())
        {
            thumbnail_=std::make_shared<std::string>(r["THUMBNAIL"].as<std::string>());
        }
        if(!r["LATEST"].isNull())
        {
            latest_=std::make_shared<std::string>(r["LATEST"].as<std::string>());
        }
        if(!r["NEW"].isNull())
        {
            new_=std::make_shared<std::string>(r["NEW"].as<std::string>());
        }
        if(!r["DATETIME"].isNull())
        {
            datetime_=std::make_shared<uint64_t>(r["DATETIME"].as<uint64_t>());
        }
        if(!r["UPDATEDATETIME"].isNull())
        {
            updatedatetime_=std::make_shared<uint64_t>(r["UPDATEDATETIME"].as<uint64_t>());
        }
        if(!r["CHAPTERID"].isNull())
        {
            chapterid_=std::make_shared<std::string>(r["CHAPTERID"].as<std::string>());
        }
        if(!r["CHAPTERTITLE"].isNull())
        {
            chaptertitle_=std::make_shared<std::string>(r["CHAPTERTITLE"].as<std::string>());
        }
        if(!r["PAGE"].isNull())
        {
            page_=std::make_shared<uint64_t>(r["PAGE"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            driver_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            thumbnail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            latest_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            new_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            datetime_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            updatedatetime_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            chapterid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            chaptertitle_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            page_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

History::History(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            driver_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            latest_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            new_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            datetime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            updatedatetime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            chapterid_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            chaptertitle_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            page_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
}

History::History(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("USERID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["USERID"].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson["USERID"].asUInt64());
        }
    }
    if(pJson.isMember("ID"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["ID"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["ID"].asString());
        }
    }
    if(pJson.isMember("DRIVER"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["DRIVER"].isNull())
        {
            driver_=std::make_shared<std::string>(pJson["DRIVER"].asString());
        }
    }
    if(pJson.isMember("TITLE"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["TITLE"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["TITLE"].asString());
        }
    }
    if(pJson.isMember("THUMBNAIL"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["THUMBNAIL"].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson["THUMBNAIL"].asString());
        }
    }
    if(pJson.isMember("LATEST"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["LATEST"].isNull())
        {
            latest_=std::make_shared<std::string>(pJson["LATEST"].asString());
        }
    }
    if(pJson.isMember("NEW"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["NEW"].isNull())
        {
            new_=std::make_shared<std::string>(pJson["NEW"].asString());
        }
    }
    if(pJson.isMember("DATETIME"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["DATETIME"].isNull())
        {
            datetime_=std::make_shared<uint64_t>((uint64_t)pJson["DATETIME"].asUInt64());
        }
    }
    if(pJson.isMember("UPDATEDATETIME"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["UPDATEDATETIME"].isNull())
        {
            updatedatetime_=std::make_shared<uint64_t>((uint64_t)pJson["UPDATEDATETIME"].asUInt64());
        }
    }
    if(pJson.isMember("CHAPTERID"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["CHAPTERID"].isNull())
        {
            chapterid_=std::make_shared<std::string>(pJson["CHAPTERID"].asString());
        }
    }
    if(pJson.isMember("CHAPTERTITLE"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["CHAPTERTITLE"].isNull())
        {
            chaptertitle_=std::make_shared<std::string>(pJson["CHAPTERTITLE"].asString());
        }
    }
    if(pJson.isMember("PAGE"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["PAGE"].isNull())
        {
            page_=std::make_shared<uint64_t>((uint64_t)pJson["PAGE"].asUInt64());
        }
    }
}

void History::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            driver_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            latest_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            new_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            datetime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            updatedatetime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            chapterid_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            chaptertitle_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            page_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
}

void History::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("USERID"))
    {
        if(!pJson["USERID"].isNull())
        {
            userid_=std::make_shared<uint64_t>((uint64_t)pJson["USERID"].asUInt64());
        }
    }
    if(pJson.isMember("ID"))
    {
        if(!pJson["ID"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["ID"].asString());
        }
    }
    if(pJson.isMember("DRIVER"))
    {
        if(!pJson["DRIVER"].isNull())
        {
            driver_=std::make_shared<std::string>(pJson["DRIVER"].asString());
        }
    }
    if(pJson.isMember("TITLE"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["TITLE"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["TITLE"].asString());
        }
    }
    if(pJson.isMember("THUMBNAIL"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["THUMBNAIL"].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson["THUMBNAIL"].asString());
        }
    }
    if(pJson.isMember("LATEST"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["LATEST"].isNull())
        {
            latest_=std::make_shared<std::string>(pJson["LATEST"].asString());
        }
    }
    if(pJson.isMember("NEW"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["NEW"].isNull())
        {
            new_=std::make_shared<std::string>(pJson["NEW"].asString());
        }
    }
    if(pJson.isMember("DATETIME"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["DATETIME"].isNull())
        {
            datetime_=std::make_shared<uint64_t>((uint64_t)pJson["DATETIME"].asUInt64());
        }
    }
    if(pJson.isMember("UPDATEDATETIME"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["UPDATEDATETIME"].isNull())
        {
            updatedatetime_=std::make_shared<uint64_t>((uint64_t)pJson["UPDATEDATETIME"].asUInt64());
        }
    }
    if(pJson.isMember("CHAPTERID"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["CHAPTERID"].isNull())
        {
            chapterid_=std::make_shared<std::string>(pJson["CHAPTERID"].asString());
        }
    }
    if(pJson.isMember("CHAPTERTITLE"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["CHAPTERTITLE"].isNull())
        {
            chaptertitle_=std::make_shared<std::string>(pJson["CHAPTERTITLE"].asString());
        }
    }
    if(pJson.isMember("PAGE"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["PAGE"].isNull())
        {
            page_=std::make_shared<uint64_t>((uint64_t)pJson["PAGE"].asUInt64());
        }
    }
}

const uint64_t &History::getValueOfUserid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getUserid() const noexcept
{
    return userid_;
}
void History::setUserid(const uint64_t &pUserid) noexcept
{
    userid_ = std::make_shared<uint64_t>(pUserid);
    dirtyFlag_[0] = true;
}

const std::string &History::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getId() const noexcept
{
    return id_;
}
void History::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[1] = true;
}
void History::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[1] = true;
}

const std::string &History::getValueOfDriver() const noexcept
{
    const static std::string defaultValue = std::string();
    if(driver_)
        return *driver_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getDriver() const noexcept
{
    return driver_;
}
void History::setDriver(const std::string &pDriver) noexcept
{
    driver_ = std::make_shared<std::string>(pDriver);
    dirtyFlag_[2] = true;
}
void History::setDriver(std::string &&pDriver) noexcept
{
    driver_ = std::make_shared<std::string>(std::move(pDriver));
    dirtyFlag_[2] = true;
}

const std::string &History::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getTitle() const noexcept
{
    return title_;
}
void History::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[3] = true;
}
void History::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[3] = true;
}

const std::string &History::getValueOfThumbnail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(thumbnail_)
        return *thumbnail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getThumbnail() const noexcept
{
    return thumbnail_;
}
void History::setThumbnail(const std::string &pThumbnail) noexcept
{
    thumbnail_ = std::make_shared<std::string>(pThumbnail);
    dirtyFlag_[4] = true;
}
void History::setThumbnail(std::string &&pThumbnail) noexcept
{
    thumbnail_ = std::make_shared<std::string>(std::move(pThumbnail));
    dirtyFlag_[4] = true;
}

const std::string &History::getValueOfLatest() const noexcept
{
    const static std::string defaultValue = std::string();
    if(latest_)
        return *latest_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getLatest() const noexcept
{
    return latest_;
}
void History::setLatest(const std::string &pLatest) noexcept
{
    latest_ = std::make_shared<std::string>(pLatest);
    dirtyFlag_[5] = true;
}
void History::setLatest(std::string &&pLatest) noexcept
{
    latest_ = std::make_shared<std::string>(std::move(pLatest));
    dirtyFlag_[5] = true;
}

const std::string &History::getValueOfNew() const noexcept
{
    const static std::string defaultValue = std::string();
    if(new_)
        return *new_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getNew() const noexcept
{
    return new_;
}
void History::setNew(const std::string &pNew) noexcept
{
    new_ = std::make_shared<std::string>(pNew);
    dirtyFlag_[6] = true;
}
void History::setNew(std::string &&pNew) noexcept
{
    new_ = std::make_shared<std::string>(std::move(pNew));
    dirtyFlag_[6] = true;
}

const uint64_t &History::getValueOfDatetime() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(datetime_)
        return *datetime_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getDatetime() const noexcept
{
    return datetime_;
}
void History::setDatetime(const uint64_t &pDatetime) noexcept
{
    datetime_ = std::make_shared<uint64_t>(pDatetime);
    dirtyFlag_[7] = true;
}

const uint64_t &History::getValueOfUpdatedatetime() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(updatedatetime_)
        return *updatedatetime_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getUpdatedatetime() const noexcept
{
    return updatedatetime_;
}
void History::setUpdatedatetime(const uint64_t &pUpdatedatetime) noexcept
{
    updatedatetime_ = std::make_shared<uint64_t>(pUpdatedatetime);
    dirtyFlag_[8] = true;
}

const std::string &History::getValueOfChapterid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(chapterid_)
        return *chapterid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getChapterid() const noexcept
{
    return chapterid_;
}
void History::setChapterid(const std::string &pChapterid) noexcept
{
    chapterid_ = std::make_shared<std::string>(pChapterid);
    dirtyFlag_[9] = true;
}
void History::setChapterid(std::string &&pChapterid) noexcept
{
    chapterid_ = std::make_shared<std::string>(std::move(pChapterid));
    dirtyFlag_[9] = true;
}
void History::setChapteridToNull() noexcept
{
    chapterid_.reset();
    dirtyFlag_[9] = true;
}

const std::string &History::getValueOfChaptertitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(chaptertitle_)
        return *chaptertitle_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getChaptertitle() const noexcept
{
    return chaptertitle_;
}
void History::setChaptertitle(const std::string &pChaptertitle) noexcept
{
    chaptertitle_ = std::make_shared<std::string>(pChaptertitle);
    dirtyFlag_[10] = true;
}
void History::setChaptertitle(std::string &&pChaptertitle) noexcept
{
    chaptertitle_ = std::make_shared<std::string>(std::move(pChaptertitle));
    dirtyFlag_[10] = true;
}
void History::setChaptertitleToNull() noexcept
{
    chaptertitle_.reset();
    dirtyFlag_[10] = true;
}

const uint64_t &History::getValueOfPage() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(page_)
        return *page_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getPage() const noexcept
{
    return page_;
}
void History::setPage(const uint64_t &pPage) noexcept
{
    page_ = std::make_shared<uint64_t>(pPage);
    dirtyFlag_[11] = true;
}
void History::setPageToNull() noexcept
{
    page_.reset();
    dirtyFlag_[11] = true;
}

void History::updateId(const uint64_t id)
{
}
typename History::PrimaryKeyType History::getPrimaryKey() const
{
    return std::make_tuple(*userid_,*id_,*driver_);
}

const std::vector<std::string> &History::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "USERID",
        "ID",
        "DRIVER",
        "TITLE",
        "THUMBNAIL",
        "LATEST",
        "NEW",
        "DATETIME",
        "UPDATEDATETIME",
        "CHAPTERID",
        "CHAPTERTITLE",
        "PAGE"
    };
    return inCols;
}

void History::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDriver())
        {
            binder << getValueOfDriver();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getThumbnail())
        {
            binder << getValueOfThumbnail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLatest())
        {
            binder << getValueOfLatest();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getNew())
        {
            binder << getValueOfNew();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDatetime())
        {
            binder << getValueOfDatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatedatetime())
        {
            binder << getValueOfUpdatedatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getChapterid())
        {
            binder << getValueOfChapterid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getChaptertitle())
        {
            binder << getValueOfChaptertitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPage())
        {
            binder << getValueOfPage();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> History::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void History::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDriver())
        {
            binder << getValueOfDriver();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getThumbnail())
        {
            binder << getValueOfThumbnail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLatest())
        {
            binder << getValueOfLatest();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getNew())
        {
            binder << getValueOfNew();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDatetime())
        {
            binder << getValueOfDatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatedatetime())
        {
            binder << getValueOfUpdatedatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getChapterid())
        {
            binder << getValueOfChapterid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getChaptertitle())
        {
            binder << getValueOfChaptertitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPage())
        {
            binder << getValueOfPage();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value History::toJson() const
{
    Json::Value ret;
    if(getUserid())
    {
        ret["USERID"]=(Json::UInt64)getValueOfUserid();
    }
    else
    {
        ret["USERID"]=Json::Value();
    }
    if(getId())
    {
        ret["ID"]=getValueOfId();
    }
    else
    {
        ret["ID"]=Json::Value();
    }
    if(getDriver())
    {
        ret["DRIVER"]=getValueOfDriver();
    }
    else
    {
        ret["DRIVER"]=Json::Value();
    }
    if(getTitle())
    {
        ret["TITLE"]=getValueOfTitle();
    }
    else
    {
        ret["TITLE"]=Json::Value();
    }
    if(getThumbnail())
    {
        ret["THUMBNAIL"]=getValueOfThumbnail();
    }
    else
    {
        ret["THUMBNAIL"]=Json::Value();
    }
    if(getLatest())
    {
        ret["LATEST"]=getValueOfLatest();
    }
    else
    {
        ret["LATEST"]=Json::Value();
    }
    if(getNew())
    {
        ret["NEW"]=getValueOfNew();
    }
    else
    {
        ret["NEW"]=Json::Value();
    }
    if(getDatetime())
    {
        ret["DATETIME"]=(Json::UInt64)getValueOfDatetime();
    }
    else
    {
        ret["DATETIME"]=Json::Value();
    }
    if(getUpdatedatetime())
    {
        ret["UPDATEDATETIME"]=(Json::UInt64)getValueOfUpdatedatetime();
    }
    else
    {
        ret["UPDATEDATETIME"]=Json::Value();
    }
    if(getChapterid())
    {
        ret["CHAPTERID"]=getValueOfChapterid();
    }
    else
    {
        ret["CHAPTERID"]=Json::Value();
    }
    if(getChaptertitle())
    {
        ret["CHAPTERTITLE"]=getValueOfChaptertitle();
    }
    else
    {
        ret["CHAPTERTITLE"]=Json::Value();
    }
    if(getPage())
    {
        ret["PAGE"]=(Json::UInt64)getValueOfPage();
    }
    else
    {
        ret["PAGE"]=Json::Value();
    }
    return ret;
}

Json::Value History::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[1]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDriver())
            {
                ret[pMasqueradingVector[2]]=getValueOfDriver();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[3]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getThumbnail())
            {
                ret[pMasqueradingVector[4]]=getValueOfThumbnail();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLatest())
            {
                ret[pMasqueradingVector[5]]=getValueOfLatest();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getNew())
            {
                ret[pMasqueradingVector[6]]=getValueOfNew();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getDatetime())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfDatetime();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdatedatetime())
            {
                ret[pMasqueradingVector[8]]=(Json::UInt64)getValueOfUpdatedatetime();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getChapterid())
            {
                ret[pMasqueradingVector[9]]=getValueOfChapterid();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getChaptertitle())
            {
                ret[pMasqueradingVector[10]]=getValueOfChaptertitle();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getPage())
            {
                ret[pMasqueradingVector[11]]=(Json::UInt64)getValueOfPage();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserid())
    {
        ret["USERID"]=(Json::UInt64)getValueOfUserid();
    }
    else
    {
        ret["USERID"]=Json::Value();
    }
    if(getId())
    {
        ret["ID"]=getValueOfId();
    }
    else
    {
        ret["ID"]=Json::Value();
    }
    if(getDriver())
    {
        ret["DRIVER"]=getValueOfDriver();
    }
    else
    {
        ret["DRIVER"]=Json::Value();
    }
    if(getTitle())
    {
        ret["TITLE"]=getValueOfTitle();
    }
    else
    {
        ret["TITLE"]=Json::Value();
    }
    if(getThumbnail())
    {
        ret["THUMBNAIL"]=getValueOfThumbnail();
    }
    else
    {
        ret["THUMBNAIL"]=Json::Value();
    }
    if(getLatest())
    {
        ret["LATEST"]=getValueOfLatest();
    }
    else
    {
        ret["LATEST"]=Json::Value();
    }
    if(getNew())
    {
        ret["NEW"]=getValueOfNew();
    }
    else
    {
        ret["NEW"]=Json::Value();
    }
    if(getDatetime())
    {
        ret["DATETIME"]=(Json::UInt64)getValueOfDatetime();
    }
    else
    {
        ret["DATETIME"]=Json::Value();
    }
    if(getUpdatedatetime())
    {
        ret["UPDATEDATETIME"]=(Json::UInt64)getValueOfUpdatedatetime();
    }
    else
    {
        ret["UPDATEDATETIME"]=Json::Value();
    }
    if(getChapterid())
    {
        ret["CHAPTERID"]=getValueOfChapterid();
    }
    else
    {
        ret["CHAPTERID"]=Json::Value();
    }
    if(getChaptertitle())
    {
        ret["CHAPTERTITLE"]=getValueOfChaptertitle();
    }
    else
    {
        ret["CHAPTERTITLE"]=Json::Value();
    }
    if(getPage())
    {
        ret["PAGE"]=(Json::UInt64)getValueOfPage();
    }
    else
    {
        ret["PAGE"]=Json::Value();
    }
    return ret;
}

bool History::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("USERID"))
    {
        if(!validJsonOfField(0, "USERID", pJson["USERID"], err, true))
            return false;
    }
    else
    {
        err="The USERID column cannot be null";
        return false;
    }
    if(pJson.isMember("ID"))
    {
        if(!validJsonOfField(1, "ID", pJson["ID"], err, true))
            return false;
    }
    else
    {
        err="The ID column cannot be null";
        return false;
    }
    if(pJson.isMember("DRIVER"))
    {
        if(!validJsonOfField(2, "DRIVER", pJson["DRIVER"], err, true))
            return false;
    }
    else
    {
        err="The DRIVER column cannot be null";
        return false;
    }
    if(pJson.isMember("TITLE"))
    {
        if(!validJsonOfField(3, "TITLE", pJson["TITLE"], err, true))
            return false;
    }
    else
    {
        err="The TITLE column cannot be null";
        return false;
    }
    if(pJson.isMember("THUMBNAIL"))
    {
        if(!validJsonOfField(4, "THUMBNAIL", pJson["THUMBNAIL"], err, true))
            return false;
    }
    else
    {
        err="The THUMBNAIL column cannot be null";
        return false;
    }
    if(pJson.isMember("LATEST"))
    {
        if(!validJsonOfField(5, "LATEST", pJson["LATEST"], err, true))
            return false;
    }
    else
    {
        err="The LATEST column cannot be null";
        return false;
    }
    if(pJson.isMember("NEW"))
    {
        if(!validJsonOfField(6, "NEW", pJson["NEW"], err, true))
            return false;
    }
    else
    {
        err="The NEW column cannot be null";
        return false;
    }
    if(pJson.isMember("DATETIME"))
    {
        if(!validJsonOfField(7, "DATETIME", pJson["DATETIME"], err, true))
            return false;
    }
    else
    {
        err="The DATETIME column cannot be null";
        return false;
    }
    if(pJson.isMember("UPDATEDATETIME"))
    {
        if(!validJsonOfField(8, "UPDATEDATETIME", pJson["UPDATEDATETIME"], err, true))
            return false;
    }
    else
    {
        err="The UPDATEDATETIME column cannot be null";
        return false;
    }
    if(pJson.isMember("CHAPTERID"))
    {
        if(!validJsonOfField(9, "CHAPTERID", pJson["CHAPTERID"], err, true))
            return false;
    }
    if(pJson.isMember("CHAPTERTITLE"))
    {
        if(!validJsonOfField(10, "CHAPTERTITLE", pJson["CHAPTERTITLE"], err, true))
            return false;
    }
    if(pJson.isMember("PAGE"))
    {
        if(!validJsonOfField(11, "PAGE", pJson["PAGE"], err, true))
            return false;
    }
    return true;
}
bool History::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool History::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("USERID"))
    {
        if(!validJsonOfField(0, "USERID", pJson["USERID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("ID"))
    {
        if(!validJsonOfField(1, "ID", pJson["ID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("DRIVER"))
    {
        if(!validJsonOfField(2, "DRIVER", pJson["DRIVER"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("TITLE"))
    {
        if(!validJsonOfField(3, "TITLE", pJson["TITLE"], err, false))
            return false;
    }
    if(pJson.isMember("THUMBNAIL"))
    {
        if(!validJsonOfField(4, "THUMBNAIL", pJson["THUMBNAIL"], err, false))
            return false;
    }
    if(pJson.isMember("LATEST"))
    {
        if(!validJsonOfField(5, "LATEST", pJson["LATEST"], err, false))
            return false;
    }
    if(pJson.isMember("NEW"))
    {
        if(!validJsonOfField(6, "NEW", pJson["NEW"], err, false))
            return false;
    }
    if(pJson.isMember("DATETIME"))
    {
        if(!validJsonOfField(7, "DATETIME", pJson["DATETIME"], err, false))
            return false;
    }
    if(pJson.isMember("UPDATEDATETIME"))
    {
        if(!validJsonOfField(8, "UPDATEDATETIME", pJson["UPDATEDATETIME"], err, false))
            return false;
    }
    if(pJson.isMember("CHAPTERID"))
    {
        if(!validJsonOfField(9, "CHAPTERID", pJson["CHAPTERID"], err, false))
            return false;
    }
    if(pJson.isMember("CHAPTERTITLE"))
    {
        if(!validJsonOfField(10, "CHAPTERTITLE", pJson["CHAPTERTITLE"], err, false))
            return false;
    }
    if(pJson.isMember("PAGE"))
    {
        if(!validJsonOfField(11, "PAGE", pJson["PAGE"], err, false))
            return false;
    }
    return true;
}
bool History::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool History::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
